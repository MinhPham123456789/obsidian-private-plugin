/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ExamplePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ExamplePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "to-color-2",
      name: "To Color 2",
      editorCallback: (editor) => {
        const selection = editor.getSelection();
        let regex_pattern = '(.*)<font style="color:var\\(--toggle-color-2\\)">(.*)</font>(.*)';
        let extract_result = selection.match(regex_pattern);
        if (extract_result !== null) {
          let result = "";
          extract_result.forEach((x, i) => {
            if (i !== 0) {
              result = result + x;
            }
          });
          editor.replaceSelection(result);
        } else {
          editor.replaceSelection('<font style="color:var(--toggle-color-2)">' + selection + "</font>");
        }
      }
    });
    this.addCommand({
      id: "to-color-1",
      name: "To Color 1",
      editorCallback: (editor) => {
        const selection = editor.getSelection();
        let regex_pattern = '(.*)<font style="color:var\\(--toggle-color-1\\)">(.*)</font>(.*)';
        let extract_result = selection.match(regex_pattern);
        if (extract_result !== null) {
          let result = "";
          extract_result.forEach((x, i) => {
            if (i !== 0) {
              result = result + x;
            }
          });
          editor.replaceSelection(result);
        } else {
          editor.replaceSelection('<font style="color:var(--toggle-color-1)">' + selection + "</font>");
        }
      }
    });
    this.addCommand({
      id: "to-color-3",
      name: "To Color 3",
      editorCallback: (editor) => {
        const selection = editor.getSelection();
        let regex_pattern = '(.*)<font style="color:var\\(--toggle-color-3\\)">(.*)</font>(.*)';
        let extract_result = selection.match(regex_pattern);
        if (extract_result !== null) {
          let result = "";
          extract_result.forEach((x, i) => {
            if (i !== 0) {
              result = result + x;
            }
          });
          editor.replaceSelection(result);
        } else {
          editor.replaceSelection('<font style="color:var(--toggle-color-3)">' + selection + "</font>");
        }
      }
    });
    this.addCommand({
      id: "to-color-x",
      name: "To Color X",
      editorCallback: (editor) => {
        const selection = editor.getSelection();
        let regex_pattern = '">(.*)</font>';
        let extract_result = selection.match(regex_pattern);
        console.log(extract_result);
        if (extract_result !== null) {
          let result = "";
          extract_result.forEach((x, i) => {
            if (i !== 0) {
              result = result + x;
            }
          });
          editor.replaceSelection(result);
        } else {
          editor.replaceSelection('<font style="color:var(--toggle-color-1)">' + selection + "</font>");
        }
      }
    });
    this.addCommand({
      id: "to-underlined",
      name: "To Underlined",
      editorCallback: (editor) => {
        const selection = editor.getSelection();
        let regex_pattern = "(.*)<u>(.*)</u>(.*)";
        let extract_result = selection.match(regex_pattern);
        if (extract_result !== null) {
          let result = "";
          extract_result.forEach((x, i) => {
            if (i !== 0) {
              result = result + x;
            }
          });
          editor.replaceSelection(result);
        } else {
          editor.replaceSelection("<u>" + selection + "</u>");
        }
      }
    });
    this.addCommand({
      id: "to-bold",
      name: "To Bold",
      editorCallback: (editor) => {
        const selection = editor.getSelection();
        let regex_pattern = "(.*)<b>(.*)</b>(.*)";
        let extract_result = selection.match(regex_pattern);
        if (extract_result !== null) {
          let result = "";
          extract_result.forEach((x, i) => {
            if (i !== 0) {
              result = result + x;
            }
          });
          editor.replaceSelection(result);
        } else {
          editor.replaceSelection("<b>" + selection + "</b>");
        }
      }
    });
    this.addCommand({
      id: "to-italic",
      name: "To Italic",
      editorCallback: (editor) => {
        const selection = editor.getSelection();
        let regex_pattern = "(.*)<i>(.*)</i>(.*)";
        let extract_result = selection.match(regex_pattern);
        if (extract_result !== null) {
          let result = "";
          extract_result.forEach((x, i) => {
            if (i !== 0) {
              result = result + x;
            }
          });
          editor.replaceSelection(result);
        } else {
          editor.replaceSelection("<i>" + selection + "</i>");
        }
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
